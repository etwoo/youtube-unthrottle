#!/usr/bin/env expect

set timeout -1
set prompt "]# "
set vm_dir "vm-images"
set vm_conf "./scripts/user-data"
set src_dir $env(PWD)
set access_token $env(CI_PERSONAL_ACCESS_TOKEN)
set curl_cmd "curl --no-progress-meter --fail"

#
# Helper functions
#

proc debug {msg} {
	send_user "\n# \[[clock format [clock seconds]]\] $msg\n"
	return
}

proc make_path {target} {
	return [file join $::vm_dir $target]
}

proc maybe_compress {target} {
	set p [make_path $target]
	if {[file exists $p.zst]} {
		debug "Compressed asset already exists: $p.zst"
	} else {
		debug "Compress to create: $p.zst"
		puts [exec -ignorestderr zstd -T0 -15 --compress $p]
	}
}

proc maybe_decompress {target} {
	set decompressed [make_path $target]
	set compressed $decompressed.zst
	if {[file exists $decompressed]} {
		debug "Decompressed asset already exists: $decompressed"
	} elseif {[file exists $compressed]} {
		debug "Decompress $compressed to create $decompressed"
		puts [exec -ignorestderr zstd -T0 --decompress $compressed]
	} else {
		debug "Cannot decompress because $compressed does not exist"
	}
}

proc cleanup_decompress {target} {
	set p [make_path $target]
	debug "Cleaning up: $p"
	file delete $p
}

proc get_vm_from_cache {img url access_header} {
	set vm_download "[make_path $img].zst"

	set vm_marker "$vm_download.please_delete"
	debug "Create a VM cache marker file: $vm_marker"
	close [open $vm_marker w]

	append url "/" $vm_download
	debug "Try to download cached VM image: $url"

	set curl_args "--header $access_header --output $vm_download $url"
	if {[catch {exec {*}$::curl_cmd {*}$curl_args} msg]} {
		debug "HTTP error: $msg"
		debug "VM cache miss: cleanup $vm_download $vm_marker"
		file delete $vm_download
		file delete $vm_marker
	} else {
		set vm_size [file size $vm_download]
		debug "VM cache hit: got $vm_size bytes via HTTP"
	}
}

proc get_vm_from_upstream_distro {target} {
	set upstream [join {
		"https://geo.mirror.pkgbuild.com/images/latest"
		"Arch-Linux-x86_64-cloudimg.qcow2"
	} "/"]
	debug "Download prebuilt Arch Linux VM image: $upstream"
	puts [exec {*}$::curl_cmd --output $target $upstream]
	debug "Increase disk size within VM image"
	puts [exec qemu-img resize $target 40G]
}

proc run_in_vm {cmd} {
	send "$cmd\r"
	expect {
		$::prompt {}
		eof
	}
	return $expect_out(buffer)
}

proc get_exit_code_of_previous_command_from_vm {} {
	debug "Get exit code of previous command"

	# Fail with EX_SOFTWARE by default
	set exit_code 70

	send "echo $?\r"
	expect {
		-re {(^|[\f\n\r])\d+($|[\f\n\r])} {
			set exit_code [expr {int($expect_out(0,string))}]
			debug "Got exit code of previous command: $exit_code"
		}
		$::prompt {
			debug "No exit code found before next shell prompt"
		}
		eof {
			debug "No exit code found before EOF"
		}
	}

	return $exit_code
}

proc log_into_vm {} {
	while 1 {
		expect "archlinux login: "
		send "arch\r"
		expect "Password: "
		send "arch\r"
		expect {
			"]$ " {
				break
			}
			"Login incorrect" {
				debug "Wait for 1s and try to log into VM again"
				after 1000
			}
		}
	}

	debug "Switch to root user"
	run_in_vm "sudo su -"
}

proc install_test_dependencies_in_vm {} {
	run_in_vm [join {
		"pacman --noprogressbar --noconfirm --needed -Sy"
		"--assume-installed guile"
		"--assume-installed perl"
		"ada"
		"clang"
		"cmake"
		"curl"
		"duktape"
		"jansson"
		"libseccomp"
		"llvm"
		"make"
		"pcre2"
		"protobuf-c"
	} " "]
}

proc run_tests_in_vm {nproc} {
	set ctest "COVERAGE_PROFILE_DIR=coverage.profraw ctest --preset default"
	run_in_vm "$ctest --parallel $nproc"

	return [get_exit_code_of_previous_command_from_vm]
}

proc optimize_next_vm_boot {} {
	debug "Disable cloud-init for future VM boot"
	run_in_vm "touch /etc/cloud/cloud-init.disabled"

	debug "Disable unnecessary systemd units for future VM boot"
	run_in_vm [join {
		"systemctl mask --no-reload"
		"dev-hugepages.mount"
		"dev-mqueue.mount"
		"ldconfig.service"
		"sshd.service"
		"sys-kernel-config.mount"
		"sys-kernel-debug.mount"
		"sys-kernel-tracing.mount"
		"systemd-boot-update.service"
		"systemd-homed.service"
		"systemd-journal-catalog-update.service"
		"systemd-journal-flush.service"
		"systemd-journald.service"
		"systemd-logind.service"
		"systemd-nsresourced.service"
		"systemd-random-seed.service"
		"systemd-sysusers.service"
		"systemd-time-wait-sync.service"
		"systemd-timesyncd.service"
		"systemd-udev-load-credentials.service"
		"systemd-update-done.service"
		"systemd-update-utmp.service"
		"systemd-userdbd.service"
		"systemd-vconsole-setup.service"
	} " "]
}

#
# Main body of Expect/Tcl script
#

debug "Prepare VM directory $vm_dir; later steps assume it exists"
file mkdir $vm_dir

set img [lindex $argv 0]
debug "Using VM image name: $img"

if {$argc > 1} {
	set vm_url [lindex $argv 1]
	debug "Using VM image URL: $vm_url"
	get_vm_from_cache $img $vm_url "PRIVATE-TOKEN:$access_token"
}

debug "If necessary, decompress VM files before attempting to boot"
maybe_decompress $img

set slowpath [expr {![file exists [make_path $img]]}]
if {$slowpath} {
	debug "Get VM image from upstream OS distribution"
	get_vm_from_upstream_distro [make_path $img]

	debug "Prepare cloud-init files"
	file copy $vm_conf ./
	close [open ./meta-data w]
	close [open ./vendor-data w]

	debug "Start adhoc IMDS webserver"
	spawn python3 -m http.server --directory .
	set imds_server_id $spawn_id
}

debug "Get number of CPU cores available for VM"
set nproc [exec nproc]

debug "Boot VM"
spawn qemu-system-x86_64 \
	-machine q35 \
	-smp $nproc \
	-m 2048 \
	-nographic \
	-net user \
	-net nic \
	-fsdev local,id=fsdev0,path=$src_dir,security_model=none \
	-device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_tag=youtube-unthrottle \
	-smbios "type=1,serial=ds=nocloud;s=http://10.0.2.2:8000/" \
	[make_path $img]
set qemu_id $spawn_id

debug "Wait for boot process to reach login prompt, and then log into VM"
log_into_vm

if {$slowpath} {
	debug "Wait for cloud-init to complete"
	run_in_vm "cloud-init status --long --wait"
}

# debug "Get timing information about boot, in case of slow boot under CI"
# run_in_vm "systemd-analyze"
# run_in_vm "systemd-analyze critical-chain"
# run_in_vm "systemd-analyze blame --no-pager"

debug "Install test dependencies"
install_test_dependencies_in_vm

debug "Mount source code from host OS into guest VM"
run_in_vm "mkdir -p $src_dir"
run_in_vm "mount -t 9p -o trans=virtio youtube-unthrottle $src_dir"
run_in_vm "cd $src_dir"

debug "Run tests"
set exit_code [run_tests_in_vm $nproc]

if {$slowpath} {
	debug "Before shutdown, tweak how VM will boot in the future"
	optimize_next_vm_boot

	debug "Shutdown VM, after interactive usage completes"
	run_in_vm "systemctl poweroff --no-wall"
	wait -i $qemu_id

	debug "Stop adhoc IMDS webserver"
	close -i $imds_server_id
	wait -i $imds_server_id
} else {
	debug "Skip shutdown by killing VM forcefully"
	exec kill -9 [exp_pid -i $qemu_id]
	close -i $qemu_id
	wait -i $qemu_id
}

debug "If necessary, compress VM files, including cloud-init modifications"
maybe_compress $img

debug "Clean up decompressed files after VM shutdown"
cleanup_decompress $img

debug "Exiting with $exit_code ..."
exit $exit_code
