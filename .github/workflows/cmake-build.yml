name: build

on:
  workflow_call:
    inputs:
        os:
          required: true
          type: string
        compiler:
          required: true
          type: string
        package:
          required: true
          type: string
        preset:
          required: true
          type: string
        action:
          required: false
          type: string

permissions:
  # required by cpp-linter/cpp-linter-action@v2 for files-changed-only: false
  contents: read
  # required by EnricoMi/publish-unit-test-result-action@v2
  checks: write
  pull-requests: write

jobs:
  build:
    runs-on: ${{ inputs.os }}
    steps:
    - name: Compute a unique matrix ID for this job
      run: |
        echo -n "ID=" >> "$GITHUB_ENV"
        if [ "${{ inputs.os }}" = "macos-13" ] ; then
          echo -n "macos-amd64"
        else
          echo -n "${{ inputs.os }}"
        fi >> "$GITHUB_ENV"
        echo "-${{ inputs.compiler }}-${{ inputs.preset }}" >> "$GITHUB_ENV"

    - uses: Homebrew/actions/setup-homebrew@master
    - name: Kludge for Homebrew cache filetype issues
      run: |
        if [ $(uname) == Darwin ] ; then
          sudo rm -rf                             \
            /opt/homebrew/share/gdb/auto-load/opt \
            /opt/homebrew/share/gettext/projects  \
            /opt/homebrew/share/gettext/schema    \
            /opt/homebrew/share/gettext/styles    \
            /opt/homebrew/share/gettext/po
        fi
    - uses: tecolicom/actions-use-homebrew-tools@v1
      with:
        tools: ${{ inputs.package }} cmake ada-url curl duktape jansson pcre2
        key: BUMP=0
    - name: Kludge for Homebrew cache permission issues, and install OS-specific packages
      run: |
        if [ $(uname) == Linux ] ; then
          sudo chown -R runner /home/linuxbrew/.linuxbrew/
          brew install libseccomp
        fi
    - name: Change $SHELL to bash on Ubuntu
      run: |
        if [ $(uname) == Linux ] ; then
          sudo rm -f /bin/sh && sudo ln -s /bin/{bash,sh}
        fi
    - name: Determine Homebrew prefix
      run: |
        if [ -n "$(brew --prefix)" ] ; then
          echo "PREFIX=$(brew --prefix)"
        else
          echo "PREFIX=/usr/local"
        fi >> "$GITHUB_ENV"
    - name: Determine CC, accounting for Homebrew weirdness
      run: |
        X="$(ls $PREFIX/bin/${{ inputs.compiler }}* | head -1)"
        Y="$(ls $(brew --prefix llvm)/bin/${{ inputs.compiler }}* | head -1)"
        if [ -n "$X" ] ; then
          echo "CC=$X"
        elif [ -n "$Y" ] ; then
          echo "CC=$Y"
        fi >> "$GITHUB_ENV"

    - uses: actions/checkout@v4
    - name: Configure CMake
      run: >
        CFLAGS="-I$PREFIX/include"
        LDFLAGS="-L$PREFIX/lib"
        cmake --preset ${{ inputs.preset }}
        -DCMAKE_COMPILE_WARNING_AS_ERROR=ON
        -DCMAKE_EXPORT_COMPILE_COMMANDS=1

    - name: Build
      if: inputs.action == '' || inputs.action == 'coverage'
      run: cmake --build --preset default --parallel
    - name: Test
      if: inputs.action == '' || inputs.action == 'coverage'
      run: >
        LD_LIBRARY_PATH="$PREFIX/lib"
        COVERAGE_PROFILE_DIR=coverage.profraw
        ctest --preset default
    - name: Gather LastTest.log
      uses: actions/upload-artifact@v4
      if: inputs.action == '' || inputs.action == 'coverage'
      with:
        name: LastTest.log-${{ env.ID }}
        path: ./build/Testing/Temporary/LastTest.log

    - name: Gather test results (Linux)
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: startsWith(inputs.os, 'ubuntu-') && ( inputs.action == '' || inputs.action == 'coverage' )
      with:
        check_name: Test Report for ${{ env.ID }}
        comment_mode: 'off'
        files: ./build/junit.xml
        report_individual_runs: true
    - name: Gather test results (macOS)
      uses: EnricoMi/publish-unit-test-result-action/macos@v2
      if: startsWith(inputs.os, 'macos-') && ( inputs.action == '' || inputs.action == 'coverage' )
      with:
        check_name: Test Report for ${{ env.ID }}
        comment_mode: 'off'
        files: ./build/junit.xml
        report_individual_runs: true

    - name: Gather code coverage data
      if: inputs.action == 'coverage'
      run: |
        echo '```' >> "$GITHUB_STEP_SUMMARY"
        ./scripts/coverage.sh       \
          -E 'main.c|linuxbrew'     \
          coverage.profraw ./build/coverage.xml >> "$GITHUB_STEP_SUMMARY"
        echo >> "$GITHUB_STEP_SUMMARY"
        echo '```' >> "$GITHUB_STEP_SUMMARY"
    - name: Fail job if code coverage falls below threshold
      uses: VeryGoodOpenSource/very_good_coverage@v2
      if: inputs.action == 'coverage'
      with:
        path: ./build/coverage.lcov
        min_coverage: 100
        exclude: '/home/linuxbrew/.linuxbrew/include/** **/main.c'

    - name: Run clang-format and clang-tidy, including clang-analyzer checks
      id: lint
      uses: cpp-linter/cpp-linter-action@v2
      if: inputs.action == 'lint'
      with:
        style: 'file'   # use .clang-format
        tidy-checks: '' # use .clang-tidy
        version: 19     # use clang-{format,tidy}-19
        database: ./build/
        ignore: ./build/
        files-changed-only: false
        file-annotations: true
        step-summary: true
    - name: Fail job if clang-format or clang-tidy found problems
      if: steps.lint.outputs.checks-failed > 0
      run: exit 1
