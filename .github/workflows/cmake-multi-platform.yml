name: multi-platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  # required by cpp-linter/cpp-linter-action@v2 for files-changed-only: false
  contents: read

jobs:
  build-all:
    strategy:
      fail-fast: false
      matrix:
        # macos-15 is arm64 (aarch64), macos-15-large is amd64 (x86_64)
        os: [ubuntu-latest, macos-15, macos-15-large]
        toolchain:
          - compiler: gcc
            package: gcc-14
            # gcc-14 (currently) required to workaround failures on gcc-15:
            #
            #     {standard input}: Assembler messages:
            #     {standard input}:1921: Error: unknown pseudo-op: `.base64'
            #
            # related upstream issues:
            #
            #     https://gcc.gnu.org/bugzilla/show_bug.cgi?id=117342
            #     https://gcc.gnu.org/bugzilla/show_bug.cgi?id=119657
          - compiler: clang
            package: llvm
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/make-homebrew-devenv
      with:
        os: ${{ matrix.os }}
        compiler: ${{ matrix.toolchain.compiler }}
        package: ${{ matrix.toolchain.package }}
    - name: Configure, build, and test
      run: >
        cmake --preset default -DCMAKE_COMPILE_WARNING_AS_ERROR=ON &&
        cmake --build --preset default --parallel &&
        ctest --preset default
    - uses: ./.github/actions/collect-ctest-logs
      if: failure()
      with:
        unique-suffix: ${{ matrix.os }}-${{ matrix.toolchain.compiler }}

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/make-homebrew-devenv
    - name: Configure and build
      run: >
        cmake --preset default
        -DCMAKE_COMPILE_WARNING_AS_ERROR=ON
        -DCMAKE_EXPORT_COMPILE_COMMANDS=1 &&
        cmake --build --preset default --parallel
    - name: Run clang-format and clang-tidy, including clang-analyzer checks
      id: lint
      uses: cpp-linter/cpp-linter-action@v2
      with:
        style: 'file'   # use .clang-format
        tidy-checks: '' # use .clang-tidy
        version: 19     # use clang-{format,tidy}-19
        database: ./build/
        ignore: ./build/
        files-changed-only: false
        file-annotations: true
        step-summary: true
    - name: Fail job if clang-format or clang-tidy found problems
      if: steps.lint.outputs.checks-failed > 0
      run: exit 1

  coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/make-homebrew-devenv
    - name: Configure, build, and test
      run: >
        cmake --preset coverage -DCMAKE_COMPILE_WARNING_AS_ERROR=ON &&
        cmake --build --preset default --parallel &&
        COVERAGE_PROFILE_DIR=coverage.profraw ctest --preset default
    - uses: ./.github/actions/collect-ctest-logs
      if: failure()
      with:
        unique-suffix: coverage
    - name: Gather code coverage data
      run: >
        ./scripts/coverage.sh -E 'main.c|build/|linuxbrew' coverage.profraw ./build/coverage.xml
        | sed 's@^@    @g' >> "$GITHUB_STEP_SUMMARY"

  build-openbsd:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Configure, build, and test
      uses: vmactions/openbsd-vm@v1
      with:
        prepare: pkg_add cmake git ada curl duktape jansson pcre2 protobuf-c
        run: >
          cmake --preset default &&
          cmake --build --preset default &&
          ctest --preset default
    - uses: ./.github/actions/collect-ctest-logs
      if: failure()
      with:
        unique-suffix: openbsd
