image: archlinux/archlinux:base-devel

variables:
  PACKAGE_CMD: "pacman --noconfirm --needed -Sy"
  PACKAGE_DEFAULT: "ada cmake clang curl duktape git jansson libseccomp pcre2 protobuf-c"
  PACKAGE_PER_JOB: ""
  TESTS_FAIL_LACK_OF_LANDLOCK_API_IN_CI_RUNNERS: "^(cli-try-sandbox|landlock|sandbox|seccomp)$"

.build_dependencies: &build_dependencies
  before_script:
    - ${PACKAGE_CMD} ${PACKAGE_DEFAULT} ${PACKAGE_PER_JOB}

build:gcc:
  <<: *build_dependencies
  stage: build
  script:
    - cmake --preset default -DCMAKE_COMPILE_WARNING_AS_ERROR=ON
    - cmake --build --preset default
    - ctest --preset default -E ${TESTS_FAIL_LACK_OF_LANDLOCK_API_IN_CI_RUNNERS}
  artifacts:
    when: always
    reports:
      junit: ./build/junit.xml

build:clang:
  <<: *build_dependencies
  stage: build
  script:
    - cmake --preset clang -DCMAKE_COMPILE_WARNING_AS_ERROR=ON
    - cmake --build --preset default
    - ctest --preset default -E ${TESTS_FAIL_LACK_OF_LANDLOCK_API_IN_CI_RUNNERS}
  artifacts:
    when: always
    reports:
      junit: ./build/junit.xml

build:clang-format:
  <<: *build_dependencies
  stage: build
  script:
    - cmake --preset default
    - cmake --build --preset default --target fmt

build:clang-coverage:
  <<: *build_dependencies
  stage: build
  # Use medium machine type (instead of default small) to improve VM performance
  tags:
    - saas-linux-medium-amd64
  variables:
    PACKAGE_PER_JOB: "expect jq llvm python qemu-img qemu-system-x86 virtiofsd"
  #
  # For CI_PERSONAL_ACCESS_TOKEN, see: Settings > CI/CD > Variables
  #
  # Increment the BUMP envvar to force a VM image cache miss
  #
  script:
    - cmake --preset coverage
    - cmake --build --preset default
    - export CI_PERSONAL_ACCESS_TOKEN=${CI_PERSONAL_ACCESS_TOKEN}
    - export CI_PROJECT_ID=${CI_PROJECT_ID}
    - export BUMP=11
    - export IMG=$((echo $BUMP && cat ./scripts/user-data) | sha256sum | cut -f1 -d' ')
    - export URI=$(./scripts/find-vm-artifact.sh "vm-images/$IMG.zst") && echo "Fetching $URI"
    - ./scripts/qemu-build.exp $IMG $URI
    - ./scripts/coverage.sh -E 'main.c|build/' coverage.profraw ./build/coverage.xml
  after_script:
    - ./scripts/cleanup-vm-archive.sh vm-images
  coverage: '/^TOTAL.*\s+([\d\.]+\%)$/'
  artifacts:
    when: always
    paths:
      - vm-images/*.zst
    reports:
      junit: ./build/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: ./build/coverage.xml

#
# Based on https://gitlab.com/gitlab-ci-utils/container-images/vale
#
# Restricting comments in code and internal documentation with Vale would
# probably never make sense in a real software project, especially one with
# a large team of varying language backgrounds.
#
# That said, a pedantic approach does no harm for a personal project
# because at worst, I only shoot myself in the foot.
#
lint:prose:
  stage: build
  image:
    name: registry.gitlab.com/gitlab-ci-utils/container-images/vale:latest
    entrypoint: ['']
  before_script:
    - /vale/sync.sh
  script:
    - ./scripts/check-prose.sh /vale/vale-glcq.tmpl > vale.json
  after_script:
    - jq -r '.[].check_name' vale.json | sort | uniq -c | sort -nr
  artifacts:
    when: always
    reports:
      codequality: vale.json

lint:shell:
  stage: build
  before_script:
    - ${PACKAGE_CMD} git shellcheck
  script:
    - git ls-files -z '**.sh' | xargs -0 shellcheck --shell=bash

lint:tcl:
  stage: build
  before_script:
    - ${PACKAGE_CMD} git python-pip
    - pip install --break-system-packages --root-user-action ignore tclint
  script:
    - tclfmt --in-place --indent=tab ./scripts/*.exp
    - git diff --exit-code ./scripts/*.exp
    - tclint ./scripts/*.exp

#
# Run the Clang Static Analyzer via clang-tidy: https://clang-analyzer.llvm.org
#
analyze:clang-tidy:
  <<: *build_dependencies
  stage: build
  script:
    - cmake --preset clang -DCMAKE_C_CLANG_TIDY=clang-tidy
    - cmake --build --preset default

#
# Run the Infer static analyzer: https://fbinfer.com
#
analyze:fb-infer:
  <<: *build_dependencies
  stage: build
  script:
    - cmake --preset clang -DCMAKE_EXPORT_COMPILE_COMMANDS=1
    - cmake --build --preset default
    - curl -sSL https://github.com/facebook/infer/releases/download/v1.2.0/infer-linux-x86_64-v1.2.0.tar.xz | tar -C ./build/ -xJ
    - ./build/infer-linux-x86_64-v1.2.0/bin/infer run
