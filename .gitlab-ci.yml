image: archlinux/archlinux:base-devel

variables:
  PACKAGE_CMD: "pacman --noconfirm --needed -Sy"
  PACKAGE_DEFAULT: "cmake clang curl duktape git jansson libseccomp pcre2"
  PACKAGE_PER_JOB: ""
  TESTS_FAIL_LACK_OF_LANDLOCK_API_IN_CI_RUNNERS: "^(cli-try-sandbox|cli-valid-args-invalid-hostname|landlock|sandbox|seccomp)$"

.build_dependencies: &build_dependencies
  before_script:
    - ${PACKAGE_CMD} ${PACKAGE_DEFAULT} ${PACKAGE_PER_JOB}

build:gcc:
  <<: *build_dependencies
  stage: build
  script:
    - cmake --preset default
    - cmake --build --preset default
    - ctest --preset default -E ${TESTS_FAIL_LACK_OF_LANDLOCK_API_IN_CI_RUNNERS}
  artifacts:
    when: always
    reports:
      junit: ./build/junit.xml

build:clang:
  <<: *build_dependencies
  stage: build
  script:
    - cmake --preset clang
    - cmake --build --preset default
    - ctest --preset default -E ${TESTS_FAIL_LACK_OF_LANDLOCK_API_IN_CI_RUNNERS}
  artifacts:
    when: always
    reports:
      junit: ./build/junit.xml

build:clang-format:
  <<: *build_dependencies
  stage: build
  script:
    - cmake --preset default
    - cmake --build --preset default --target fmt

build:clang-coverage:
  <<: *build_dependencies
  stage: build
  # Use medium machine type (instead of default small) to improve VM perf
  tags:
    - saas-linux-medium-amd64
  variables:
    PACKAGE_PER_JOB: "expect jq llvm python qemu-img qemu-system-x86 virtiofsd"
  #
  # For CI_PERSONAL_ACCESS_TOKEN, see: Settings > CI/CD > Variables
  #
  # Increment the BUMP envvar to force a VM image cache miss
  #
  script:
    - cmake --preset coverage
    - cmake --build --preset default
    - export CI_PERSONAL_ACCESS_TOKEN=${CI_PERSONAL_ACCESS_TOKEN}
    - export CI_PROJECT_ID=${CI_PROJECT_ID}
    - export BUMP=11
    - export IMG=$((echo $BUMP && cat ./scripts/user-data) | sha256sum | cut -f1 -d' ')
    - export URI=$(./scripts/find-vm-artifact.sh "vm-images/$IMG.zst") && echo "Fetching $URI"
    - ./scripts/qemu-build.exp $IMG $URI
    - ./scripts/coverage.sh -E main.c coverage.profraw ./build/coverage.xml
  after_script:
    - ./scripts/cleanup-vm-archive.sh vm-images
  coverage: '/^TOTAL.*\s+([\d\.]+\%)$/'
  artifacts:
    when: always
    paths:
      - vm-images/*.zst
    reports:
      junit: ./build/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: ./build/coverage.xml

lint:shell:
  stage: build
  before_script:
    - ${PACKAGE_CMD} shellcheck
  script:
    - shellcheck --shell=bash ./scripts/*.sh

lint:tcl:
  stage: build
  before_script:
    - ${PACKAGE_CMD} git python-pip
    - pip install --break-system-packages --root-user-action ignore tclint
  script:
    - tclfmt --in-place --indent=tab ./scripts/*.exp
    - git diff --exit-code ./scripts/*.exp
    - tclint ./scripts/*.exp
